
#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8765;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

	userid on;
	userid_name SESSIONID;
	userid_domain localhost;
	userid_path /;

        client_max_body_size 100k;

        hi_need_cache on;
        hi_cache_size 10;
        hi_cache_expires 300s;
        hi_need_headers off;
        hi_need_cookies off;
        hi_need_session off;
        hi_session_expires 300s;
        hi_redis_host 127.0.0.1;
        hi_redis_port 6379;
        
        expires 10s;
        more_set_headers    "Server: hi-nginx";

        location = /hello {
            hi_need_cache off;
            hi hi/hello.so;
        }



        location ^~ /form {
            rewrite ^/form/(\d+)$ /form/?item=$1 break;
            hi_need_cache off;
            hi_need_headers on;
            hi_need_cookies on;
            hi hi/form.so;
        }

        location = /error {
            hi hi/error.so;
        }

        location = /redirect {
            hi hi/redirect.so;
        }

        location = /empty {
            hi hi/empty.so;
        }

        location = /math {
            hi_cache_expires 5s;
            hi hi/math.so;
        }
        
        location = /session {
            hi_need_cache off;
            hi_need_session on;
            hi_session_expires 30s;
            hi hi/session.so;
        }

	location = /pyecho {
            hi_need_cache off;
            hi_python_content "hi_res.status(200)\nhi_res.content('hello,world')";
	
	}

	location ~ \.py$ {
            hi_need_cache off;
            hi_need_headers on;
            hi_need_session on;
            hi_session_expires 30s;
            hi_python_script python;
	}

	location = /luaecho {
            hi_need_cache off;
            hi_lua_content "hi_res:status(200)\nhi_res:content('hello,world')";
	
	}

	location ~ \.lua$ {
            hi_need_cache off;
            hi_need_headers on;
            hi_need_session on;
            hi_session_expires 30s;
            hi_lua_script lua;
	}

        # Upload form should be submitted to this location
        location = /upload {
            # Pass altered request body to this location
            upload_pass   @uploadend;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store html/upload 1;
            
            # Allow uploaded files to be read only by user
            upload_store_access user:r;

            # Set specified fields in request body
            upload_set_form_field "${upload_field_name}_name" $upload_file_name;
            upload_set_form_field "${upload_field_name}_content_type" $upload_content_type;
            upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "${upload_field_name}_md5" $upload_file_md5;
            upload_aggregate_form_field "${upload_field_name}_size" $upload_file_size;

            upload_pass_form_field "^submit$|^description$";
        }

        # Pass altered request body to a backend
        location @uploadend {
            proxy_pass   http://localhost:8080;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}


